(* this ALWAYS GENERATED file contains the Test0421Load , *)
(* Test0421Unload and defined functions.                  *)

(* File created by ODK_CodeGenerator version 0.0.116.12   *)
(* at Di April 21 10:02:24 2015                           *)

FUNCTION_BLOCK "FFT_Filter_RT_Load"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
  VAR_INPUT 
    REQ : Bool;
  END_VAR
  VAR_OUTPUT 
    DONE : Bool;
    BUSY : Bool;
    ERROR : Bool;
    STATUS : Int;
  END_VAR
  VAR 
    ODK_Load_Instance {OriginalPartName := 
        'ODK_Load_SFB_2011'; LibVersion := '1.0'} : ODK_Load;
    LIBRARY_NAME : String := '<rt>FFT_Filter_RT.so';
  END_VAR
  VAR CONSTANT 
    INSTANCE_ID : UDInt := 2109394993;
  END_VAR
BEGIN
  #ODK_Load_Instance (REQ:=#REQ,
                      LIBRARY_NAME:=#LIBRARY_NAME,
                      INSTANCE_ID:=#INSTANCE_ID,
                      DONE=>#DONE,
                      BUSY=>#BUSY,
                      ERROR=>#ERROR,
                      STATUS=>#STATUS);         
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FFT_Filter_RT_Unload"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
  VAR_INPUT 
    REQ : Bool;
  END_VAR
  VAR_OUTPUT 
    DONE : Bool;
    BUSY : Bool;
    ERROR : Bool;
    STATUS : Int;
  END_VAR
  VAR
    ODK_Unld_Instance {OriginalPartName := 
         'ODK_Unld_SFB_2012'; LibVersion := '1.0'} : ODK_Unld;
  END_VAR
  VAR CONSTANT 
    INSTANCE_ID : UDInt := 2109394993;
  END_VAR
BEGIN
  #ODK_Unld_Instance (REQ:=#REQ,
                      INSTANCE_ID:=#INSTANCE_ID,
                      DONE=>#DONE,
                      BUSY=>#BUSY,
                      ERROR=>#ERROR,
                      STATUS=>#STATUS);    
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FFT_Filter_RTSampleFunction"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
  VAR_INPUT
    myInt : DINT;
  END_VAR
  VAR_OUTPUT
    STATUS : INT := 0;
    myBool : BOOL;
  END_VAR
  VAR_IN_OUT
    myReal : LREAL;
  END_VAR
  VAR
    Last_REQ : Bool := false;
    Last_BUSY : Bool := false;
    IN_BUFFER : Array [0..3] of Byte;
    INOUT_BUFFER : Array [0..7] of Byte;
    OUT_BUFFER : Array [0..0] of Byte;
  END_VAR
  VAR_TEMP 
    pos : DInt;
    err : Int;
    i : Int;
  END_VAR
  VAR CONSTANT 
    INSTANCE_ID : UDINT := 2109394993;
    COMMAND : UDINT := 3928910264;
  END_VAR
 BEGIN
  #pos := 0;
  #err := WRITE_LITTLE ( src_variable := #myInt, dest_array := #IN_BUFFER,  pos := #pos);
  #pos := 0;
  #err := WRITE_LITTLE ( src_variable := #myReal, dest_array := #INOUT_BUFFER, pos := #pos);
  #STATUS:=ODK_ExcS(INSTANCE_ID:=#INSTANCE_ID,
                    COMMAND:=#COMMAND,
                    IN_DATA:=#IN_BUFFER,
                    INOUT_DATA:=#INOUT_BUFFER,
                    OUT_DATA:=#OUT_BUFFER
                    );
  IF STATUS < 16#7000 THEN
    #pos := 0;
    #err := READ_LITTLE (dest_variable  := #myReal, src_array := #INOUT_BUFFER,  pos := #pos);
    #pos := 0;
    myBool := BYTE_TO_BOOL(#OUT_BUFFER[#pos]);
    #pos := #pos + 1;
  END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK "FFT_Filter_RT_GetTrace"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
  VAR_INPUT
    TraceCount : INT;
  END_VAR
  VAR_OUTPUT
    STATUS : INT := 0;
    TraceBuffer : Array[0..255] of STRING;
  END_VAR
  VAR
    Last_REQ : Bool := false;
    Last_BUSY : Bool := false;
    IN_BUFFER : Array [0..1] of Byte;
    OUT_BUFFER : Array [0..32511] of Byte;
  END_VAR
  VAR_TEMP 
    pos : DInt;
    err : Int;
    i : Int;
    tmpStringLen : Byte;
    tmpDefaultValue : Array [0..0] of Byte;
    j : Int;
    tmp_string : String;
  END_VAR
  VAR CONSTANT 
    INSTANCE_ID : UDINT := 2109394993;
    COMMAND : UDINT := 576754955;
  END_VAR
BEGIN
  #pos := 0;
  #err := WRITE_LITTLE ( src_variable := #TraceCount, dest_array := #IN_BUFFER,  pos := #pos);
  #STATUS:=ODK_ExcS(INSTANCE_ID:=#INSTANCE_ID,
                    COMMAND:=#COMMAND,
                    IN_DATA:=#IN_BUFFER,
                    INOUT_DATA:=tmpDefaultValue,
                    OUT_DATA:=#OUT_BUFFER
                    );
  IF STATUS < 16#7000 THEN
    #pos := 0;
    for #j := 0 to 255 DO
      #tmp_string := '';
      #tmpStringLen := #OUT_BUFFER[#pos];
      #pos := #pos + 1;
      #tmpStringLen := #OUT_BUFFER[#pos];
      #pos := #pos + 1;
      for #i := 1 to BYTE_TO_INT(#tmpStringLen) DO
        tmp_string[#i] := BYTE_TO_CHAR(#OUT_BUFFER[#pos]);
        pos := #pos + 1;
      end_for;
      #pos := #pos + 125 - LEN (#tmp_string) ;
      #TraceBuffer[#j] := #tmp_string;
    end_for;
  END_IF;
END_FUNCTION_BLOCK
